1. Поток и процесс:
Процесс:

Экземпляр выполняющейся программы.
Имеет собственное адресное пространство памяти, ресурсы (CPU, файлы) и другие системные ресурсы.
Является независимым исполняемым объектом.
Поток:

Легковесный подпроцесс, выполняющийся внутри процесса.
Делит адресное пространство памяти процесса с другими потоками.
Не является независимым объектом, зависит от процесса.
--------------------------------------------------------------------
2. Жизненный цикл потока в Java:
Этапы:

Создание: Создание объекта класса Thread или реализации Runnable.
Запуск: Вызов метода start().
Выполнение: Поток начинает выполнять код своего метода run().
Завершение: Поток завершает работу.
Смерть: Освобождение ресурсов, связанных с потоком.
Методы изменения состояния:

start(): Запуск потока.
sleep(): Переводит поток в спящий режим на заданное время.
yield(): Добровольно уступает процессорное время другим потокам.
interrupt(): Прерывает поток.
join(): Дожидается завершения другого потока.
--------------------------------------------------------------------
3. Демон-поток в Java:
Системный поток, выполняющий фоновые задачи.
Работает в фоновом режиме, не влияет на завершение программы.
Примеры: сборщик мусора, финализаторы.
Создание: thread.setDaemon(true).
--------------------------------------------------------------------
4. Пул потоков (Thread Pool) в Java:
Механизм управления пулом потоков.
Создает и управляет потоками для выполнения задач.
Повышает производительность и эффективность использования ресурсов.
Примеры: ExecutorService, ThreadPoolExecutor.
--------------------------------------------------------------------
5. Группа потоков (Thread Group):
Группа, объединяющая несколько потоков.
Позволяет управлять группой потоков:
Запуск/остановка.
Приоритет.
Обработчики исключений.
Примеры: ThreadGroup, SecurityManager.
--------------------------------------------------------------------
6. Реентерабельный метод (reentrant method):
Метод, который может безопасно вызываться из нескольких потоков одновременно.
Не приводит к конфликтам данных.
Использует синхронизацию для защиты данных.
Примеры: методы в классах Vector, StringBuffer.
--------------------------------------------------------------------
7. Ключевое слово synchronized:
Обеспечивает синхронизацию доступа к данным.
Предотвращает конфликты данных при доступе к ним из нескольких потоков.
Используется для модификации общих ресурсов.
Примеры: synchronized(obj) { ... }, @Synchronized.
--------------------------------------------------------------------
8. Методы wait(), notify() и notifyAll() в классе Object:
Используются для синхронизации доступа к данным между потоками.
wait(): Поток блокируется до тех пор, пока не будет вызван notify() или notifyAll().
notify(): Пробуждает один из заблокированных потоков wait().
notifyAll(): Пробуждает все заблокированные потоки wait().